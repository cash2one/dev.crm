<?php

class PatientbookingController extends MobiledoctorController {

    private $model; // PatientBooking model.
    private $patient;   // PatientInfo model.

    public function filterPatientBookingContext($filterChain) {
        $bookingId = null;
        if (isset($_GET['id'])) {
            $bookingId = $_GET['id'];
        } elseif (isset($_POST['booking']['id'])) {
            $bookingId = $_POST['booking']['id'];
        }
        $this->loadModel($bookingId);
        $filterChain->run();
    }

    /**
     * @NOTE call this method after filterUserDoctorContext.
     * @param type $filterChain
     */
    public function filterPatientCreatorContext($filterChain) {
        $patientId = null;
        if (isset($_GET['pid'])) {
            $patientId = $_GET['pid'];
        } else if (isset($_POST['booking']['patient_id'])) {
            $patientId = $_POST['booking']['patient_id'];
        }

        $creator = $this->loadUser();

        $this->loadPatientInfoByIdAndCreatorId($patientId, $creator->getId());
        $filterChain->run();
    }

    /**
     * @return array action filters
     */
    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
            'postOnly + delete', // we only allow deletion via POST request
            'userDoctorContext + create',
            'patientCreatorContext + create'
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules() {
        return array(
            array('allow', // allow all users to perform 'index' and 'view' actions
                'actions' => array(''),
                'users' => array('*'),
            ),
            array('allow', // allow authenticated user to perform 'create' and 'update' actions
                'actions' => array('view', 'create', 'ajaxCreate', 'update'),
                'users' => array('@'),
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    public function actionView($id) {
    //    echo 'View Patient Booking - ' . $id;
        //    $booking = $this->model;
        $userId = $this->getCurrentUserId();
        $apiSvc = new ApiViewPatientBooking($id, $userId);
        $output = $apiSvc->loadApiViewData();
        $this->render('view', array(
            'data' => $output
        ));
    }

    public function actionCreate($pid) {
        $patient = $this->patient;
        $form = new PatientBookingForm();
        $form->initModel();
        $form->setPatientId($patient->getId());
        $this->render('create', array(
            'model' => $form
        ));
    }

    public function actionUpdate() {
        
    }

    public function actionAjaxCreate() {
        $output = array('status' => 'no');
        if (isset($_POST['booking'])) {
            $values = $_POST['booking'];
            $patientId = isset($values['patient_id']) ? $values['patient_id'] : null;
            $user = $this->loadUser();
            $userId = $user->getId();
            $form = new PatientBookingForm();
            $form->setAttributes($values, true);
            $form->setPatientId($patientId);
            $form->setCreatorId($userId);
            $form->setStatusNew();
            if ($form->validate()) {
                $patientBooking = new PatientBooking();
                $patientBooking->setAttributes($form->attributes, true);
                if ($patientBooking->save()) {
                    $output['status'] = 'ok';
                    $output['booking']['id'] = $patientBooking->getId();
                    $output['booking']['patientId'] = $patientBooking->getPatientId();
                } else {
                    $output['errors'] = $patientBooking->getErrors();
                }
            } else {
                $output['errors'] = $form->getErrors();
            }
        } else {
            $output['error'] = 'invalid request';
        }
        $this->renderJsonOutput($output);
    }

    public function loadModel($id) {
        if (is_null($this->model)) {
            $this->model = PatientBooking::model()->getById($id);
            if (is_null($this->patient)) {
                throw new CHttpException(404, 'The requested page does not exist.');
            }
        }
        return $this->model;
    }

    private function loadPatientInfoByIdAndCreatorId($id, $creatorId) {
        if (is_null($this->patient)) {
            $this->patient = PatientInfo::model()->getByIdAndCreatorId($id, $creatorId);
            if (is_null($this->patient)) {
                throw new CHttpException(404, 'The requested page does not exist.');
            }
        }
        return $this->patient;
    }

}
