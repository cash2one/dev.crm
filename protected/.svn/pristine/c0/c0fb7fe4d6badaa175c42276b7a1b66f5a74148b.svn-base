<?php

class DoctorManager {
    /*     * ****** Api 3.0 ******* */

    public function searchDoctor($searchInputs) {
        $doctorSearch = new DoctorSearch($searchInputs);
        return $doctorSearch->search();
    }

    /*
      public function createDoctorProfileForm(array $attributes, $validate = true) {
      $form = new UserDoctorProfileForm();
      //$form->initModel();
      $form->setAttributes($attributes, true);
      if ($validate) {
      $form->validate();
      }
      return $form;
      }
     * 
     */

    /*
      public function createDoctorProfile($attributes) {
      $doctor = new Doctor();
      $doctor->setAttributes($attributes, true);
      $doctor->save();
      return $doctor;
      }
     * 
     */

    /*     * ****** Api 2.0 ******* */

    public function loadAllIDoctors($query, $with = null, $options = null) {
        $imodelList = array();
        $modelList = $this->loadAllDoctors($query, $with, $options);
        if (arrayNotEmpty($modelList)) {
            foreach ($modelList as $model) {
                $imodelList[] = $this->convertToIDoctor($model, null, $with);
            }
        }
        return $imodelList;
    }

    public function loadAllDoctors($query = null, $with = null, $options = null) {
        $criteria = new CDbCriteria();
        $criteria->addCondition("t.date_deleted is NULL");
        // building dynamic query string.
        if (isset($query['hpdept']) && strIsEmpty($query['hpdept']) === false) {
            $hpdeptId = $query['hpdept'];
            return Doctor::model()->getAllByHpDeptId($hpdeptId, $with, $options);
        }

        return array();
    }

    public function loadAllIDoctorsByHpDeptId($deptId, $with = null, $options = null) {
        $imodelList = array();
        if (is_null($with)) {
            $with = array("doctorAvatar");
        }
        $models = $this->loadAllDoctorsByHpDeptId($deptId, $with, $options);
        if (arrayNotEmpty($models)) {
            foreach ($models as $model) {
                $imodelList[] = $this->convertToIDoctor($model, $with);
            }
        }
        return $imodelList;
    }

    public function loadAllDoctorsByHpDeptId($deptId, $with = null, $options = null) {
        return Doctor::model()->getAllByHpDeptId($deptId, $with, $options);
    }

    public function loadAllIDoctorsByDiseaseIdAndHospitalId($diseaseId, $hpId, $with = null, $options = null) {
        $output = array();
        $doctors = Doctor::model()->getAllByDiseaseIdAndHospitalId($diseaseId, $hpId, $with, $options);
        if (arrayNotEmpty($doctors)) {
            $attributes = null;
            foreach ($doctors as $doctor) {
                $idoctor = $this->convertToIDoctor($doctor, $attributes, $with);
                $output[] = $idoctor;
            }
        }
        return $output;
    }

    public function loadAllDoctorsByDiseaseIdAndHospitalId($disId, $hpId, $with = null, $options = null) {
        return Doctor::model()->getAllByDiseaseIdAndHospitalId($disId, $hpId, $with, $options);
    }

    /*
      public function apiLoadIDoctorByIdJson($id) {
      $idoctor = $this->loadIDoctorById($id);
      $output['doctor'] = $idoctor;
      return $output;
      }
     * 
     */

    public function loadIDoctorById($id) {
        $with = array("doctorAvatar", "doctorCerts", 'doctorHospital');
        $doctor = $this->loadDoctorById($id, $with);
        if (isset($doctor)) {
            $idoctor = $this->convertToIDoctor($doctor, $with);
            return $idoctor;
        }
        return null;
    }

    public function createDoctor(DoctorForm $form, $checkVerifyCode = true) {
        if ($form->validate()) {
            if ($checkVerifyCode) {
                // check sms verify code.
                $userHostIp = Yii::app()->request->getUserHostAddress();
                $authMgr = new AuthManager();
                $authSmsVerify = $authMgr->verifyCodeForRegister($form->getMobile(), $form->getVerifyCode(), $userHostIp);
                if ($authSmsVerify->isValid() === false) {
                    // sms verify code is not valid.
                    $form->addError('verify_code', $authSmsVerify->getError('code'));
                    return false;
                }
            }

            $model = new Doctor();
            $model->setAttributes($form->getSafeAttributes());
            $model->scenario = $form->scenario;
            $model->prepareNewModel();
            if ($model->save() === false) {
                $form->addErrors($model->getErrors());
            } else {
                // deactive current smsverify.                
                if (isset($authSmsVerify)) {
                    $authMgr->deActiveAuthSmsVerify($authSmsVerify);
                }
                // Create DoctorCert from $_FILES.
                // saves uploaded files into filesystem and db.
                $form->id = $model->getId();
                $this->createDoctorCerts($model->getId());
            }
        }
        return ($form->hasErrors() === false);
    }

    /*
      public function createDoctorCert($doctorId) {
      $uploadField = DoctorCert::model()->file_upload_field;
      $file = EUploadedFile::getInstanceByName($uploadField);
      if (isset($file)) {
      $output['filemodel'] = $this->saveDoctorCert($file, $doctorId);
      } else {
      $output['error'] = 'missing uploaded file.';
      }
      return $output;
      }
     */

    public function createDoctorCerts($ownerId) {
        $uploadField = DoctorCert::model()->file_upload_field;
        $files = EUploadedFile::getInstancesByName($uploadField);

        $output = array();
        if (arrayNotEmpty($files)) {
            foreach ($files as $file) {
                $output[] = $this->saveDoctorCert($file, $ownerId);
            }
        }
        return $output;
    }

    /**
     * Get EUploadedFile from $_FILE. 
     * Create DoctorCert model. 
     * Save file in filesystem. 
     * Save model in db.
     * @param EUploadedFile $file EUploadedFile::getInstances()
     * @param integer $doctorId Doctor.id     
     * @return DoctorCert 
     */
    private function saveDoctorCert($file, $ownerId) {
        //$dFile = new DoctorCert();
        $dFile = new DoctorCert();
        $dFile->initModel($ownerId, $file);
        $dFile->saveModel();

        return $dFile;
    }

    /**
     * 
     * @param type $mobile
     * @param type $code
     * @param type $userIp
     * @return type AuthSmsVerify
     */
    private function checkVerifyCode($mobile, $code, $userIp = null) {
        $authMgr = new AuthManager();
        $actionType = AuthSmsVerify::ACTION_USER_REGISTER;
        return $authMgr->verifyAuthSmsCode($mobile, $code, $actionType, $userIp);
    }

    public function updateDoctor(DoctorForm $form) {
        if ($form->validate()) {
            $model = $this->loadDoctorById($form->id);
            $model->attributes = $form->attributes;
            //TODO: enable validation on save.
            if ($model->save(false) === false) {
                $form->addErrors($model->getErrors());
            }
        }
        return ($form->hasErrors() === false);
    }

    public function deleteDoctor(Doctor $model) {
        // DoctorFacultyJoin.
        FacultyDoctorJoin::model()->deleteAllByAttributes(array('doctor_id' => $model->id));
        if (isset($model->doctorAvatar)) {
            $model->doctorAvatar->delete();
        }
        // DoctorAvatar.
        DoctorAavatar::model()->deleteAllByAttributes(array('doctor_id' => $model->id));
        // Doctor. 
        $model->delete();

        return ($model->hasErrors() === false);
    }

    public function createDoctorAvatar(DoctorAvatarForm $form) {
        if ($form->validate()) {
            $avatar = new DoctorAvatar();
            $avatar->saveNewModel($form->doctor_id, $form->image_url, $form->thumbnail_url, $form->display_order);
            if ($avatar->hasErrors()) {
                $form->addErrors($avatar->getErrors());
            }
        }
        return ($form->hasErrors() === false);
    }

    public function updateDoctorAvatar(DoctorAvatarForm $form) {
        if ($form->validate()) {
            $doctor = $this->loadDoctorById($form->doctor_id, array('doctorAvatar'));
            if (isset($doctor->doctorAvatar)) {
                $avatar = $doctorAvatar;
                $avatar->attributes = $form->attributes;
                if ($avatar->save() === false) {
                    $form->addErrors($avatar->getErrors());
                }
            } else {
                throw new CHttpException(404, 'DoctorAvatar record is not found.');
            }
        }
        return ($form->hasErrors() === false);
    }

    public function loadIDoctorJson($id) {
        $idoctor = $this->loadIDoctor($id);
        if (isset($idoctor)) {
            return array('doctor' => $idoctor);
        } else {
            return null;
        }
    }

    public function loadIDoctor($id, $with = null) {
        if (is_null($with)) {
            $with = array('doctorAvatar', 'doctorHospital');
        }
        $attributes = null;
        $doctor = $this->loadDoctorById($id, $with);
        if (isset($doctor)) {
            return $this->convertToIDoctor($doctor, $attributes, $with);
        } else {
            return null;
        }
    }

    public function loadDoctorById($id, $with = null) {
        return Doctor::model()->getById($id, $with);
        /*
          $model = Doctor::model()->getById($id, $with);
          if (is_null($model)) {
          throw new CHttpException(404, 'Record is not found.');
          }
          return $model;
         * 
         */
    }

    /**
     * 
     * @param Doctor $model
     * @param array $with 
     * @return IDoctor
     */
    public function convertToIDoctor(Doctor $model, $attributes = null, $with = null) {
        if (isset($model)) {
            $imodel = new IDoctor();
            $imodel->initModel($model, $attributes);
            $imodel->addRelatedModel($model, $with);
            return $imodel;
        } else {
            return null;
        }
    }
	
	public function loadUserDoctorProfileByUserid($userid) {
        return UserDoctorProfile::model()->getByAttributes(array('user_id' => $userid));
    }

}
