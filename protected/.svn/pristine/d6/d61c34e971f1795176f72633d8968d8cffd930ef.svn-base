<?php

class BookingManager {
    /*     * ****** Api 2.0 create booking ******* */

    public function apiCreateBooking($values, User $user, $checkVerifyCode = true, $sendEmail = true) {        
        $output = array('status' => false);        
        
        // create a new Booking and save into db.        
        $form = new BookingForm();
        $form->user_id = $user->getId();
        $form->setAttributes($values);        
        $form->status = Booking::STATUS_NEW;
        // create Booking and save into db.
        $this->createBooking($form, $checkVerifyCode, $sendEmail);
        if ($form->hasErrors()) {
            $output['errors'] = $form->getFirstErrors();
            return $output;
        }
        /*
        // mobile login user.
        if (isset($values['mobile_login']) && $values['mobile_login'] == 1) {
            $mobile = $form->getMobile();
            $authMgr = new AuthManager();
            $temp = $authMgr->apiTokenUserAutoLoginByMobile($mobile);
            $output = array_merge($output, $temp);
        }
        */
        // load this booking from db and convert it to IBooking model for viewing.
        $ibooking = $this->loadIBooking($form->id);
        try {
            if ($sendEmail && isset($ibooking)) {
                // Send email to inform admin.                
                if (isset($ibooking)) {
                    $emailMgr = new EmailManager();
                    $emailMgr->sendEmailQuickBooking($ibooking);
                }
            }
        } catch (CException $ex) {
            Yii::log($ex->getMessage(), CLogger::LEVEL_ERROR, 'BookingManager.apiCreateBooking');
            $output['error_msg'] = "发送电邮出错";
        }
        $output['status'] = true;
        $output['msg'] = '预约成功';
        $output['booking'] = $ibooking;

        return $output;
    }
    
    /*
      public function apiCreateBooking($values, $checkVerifyCode = true, $sendEmail = true) {
      $output = array('status' => false);
      $authMgr = new AuthManager();
      // verify username and token.
      // load user from db if true.
      $user = null;
      if (isset($values['username']) && isset($values['token'])) {
      // verify token & username.
      // load $user from db by username.
      // The newly created booking will belong to this $user.
      $username = $values['username'];
      $token = $values['token'];

      $authUserIdentity = $authMgr->authenticateUserByToken($username, $token);
      if ($authUserIdentity->isAuthenticated === false) {
      $output['errors']['error_code'] = $authUserIdentity->errorCode;
      $output['errors']['error_msg'] = '您没有权限执行此操作';
      return $output;
      }
      $user = $authUserIdentity->getUser();
      }
      // verify mobile no. and verify_code.
      if (isset($values['mobile']) === false) {
      $output['errors']['mobile'] = '请填入手机号码';
      return $output;
      } elseif (isset($values['verify_code']) === false) {
      $output['errors']['verify_code'] = '请填入短信验证码';
      return $output;
      }
      $mobile = $values['mobile'];
      $verifyCode = $values['verify_code'];
      $userHostIp = isset($values['userHostIp']) ? $values['userHostIp'] : null;
      $authSmsVerify = $authMgr->verifyCodeForBooking($mobile, $verifyCode, $userHostIp);
      if ($authSmsVerify->isValid() === false) {
      // sms verify code is not valid.
      $output['errors']['verify_code'] = $authSmsVerify->getError('code');
      return $output;
      }


      // create a new Booking and save into db.
      $checkVerifyCode = false;
      $form = new BookingForm();
      $form->user_id = $user->getId();
      $form->setAttributes($values);
      $form->status = Booking::STATUS_NEW;
      // create Booking and save into db.
      $this->createBooking($form, $checkVerifyCode, $sendEmail);
      if ($form->hasErrors()) {
      $output['errors'] = $form->getFirstErrors();
      return $output;
      }
      // mobile login user.
      if (isset($values['mobile_login']) && $values['mobile_login'] == 1) {
      $mobile = $form->getMobile();
      $authMgr = new AuthManager($mobile);
      $temp = $authMgr->apiTokenUserAutoLoginByMobile($mobile);
      $output = array_merge($output, $temp);
      }

      // load this booking from db and convert it to IBooking model for viewing.
      $ibooking = $this->loadIBooking($form->id);
      try {
      if ($sendEmail && isset($ibooking)) {
      // Send email to inform admin.
      if (isset($ibooking)) {
      $emailMgr = new EmailManager();
      $emailMgr->sendEmailQuickBooking($ibooking);
      }
      }
      } catch (CException $ex) {
      Yii::log($ex->getMessage(), CLogger::LEVEL_ERROR, 'BookingManager.apiCreateBooking');
      $output['error_msg'] = "发送电邮出错";
      }
      $output['status'] = true;
      $output['msg'] = '预约成功';
      $output['booking'] = $ibooking;

      return $output;
      }
     */

    /*     * ****** Api 2.0 create booking file ******* */

    /**
     * single upload of BookingFile.
     * @param array $values array('booking_id'=>$bid, 'username'=>$mobile, 'token'=>$token);
     * @param type $file
     * @return string
     */
    public function apiCreateBookingFile($values, EUploadedFile $file) {
        $output = array('status' => false);

        // validates input parameters.
        if (isset($values['booking_id']) === false || isset($values['username']) === false || isset($values['token']) === false) {
            $output['errors']['error_code'] = 400;
            $output['errors']['error_msg'] = 'Wrong parameters.';
            return $output;
        }
        $bookingId = $values['booking_id'];
        $username = $values['username'];
        $token = $values['token'];
        // authenticate user by username (mobile) and token.
        $authMgr = new AuthManager();
        $authUserIdentity = $authMgr->authenticateUserByToken($username, $token);
        if ($authUserIdentity->isAuthenticated === false) {
            $output['errors']['error_code'] = $authUserIdentity->errorCode;
            $output['errors']['error_msg'] = '您没有权限执行此操作';
            return $output;
        }
        $user = $authUserIdentity->getUser();
        $userId = $user->getId();
        // TODO: load $booking from db by $bookingId.
        // check if $booking.user_id == $user.id;
        $booking = Booking::model()->getByIdAndUserId($bookingId, $userId);
        if (is_null($booking)) {
            $output['errors']['error_code'] = 110;
            $output['errors']['error_msg'] = '您没有权限执行此操作';
            return $output;
        }
        // create BookingFile and save into db.
        $bookingFile = $this->saveBookingFile($file, $bookingId, $userId);
        if ($bookingFile->hasErrors()) {
            $output['errors'] = $bookingFile->getFirstErrors();
            return $output;
        } else {
            // creates IBookingFile model for json output.
            $bookingFile = BookingFile::model()->getById($bookingFile->getId());
            $ibookingFile = new IBookingFile();
            $ibookingFile->initModel($bookingFile);
            $output['status'] = true;
            $output['bookingFile'] = $ibookingFile;
        }
        return $output;
    }

    public function createBooking(BookingForm $form, $checkVerifyCode = true) {
        if ($form->validate()) {
            if ($checkVerifyCode) {
                // Verifies AuthSmsVerify by using $mobile & $verifyCode.        
                $userHostIp = Yii::app()->request->getUserHostAddress();
                $authMgr = new AuthManager();
                $authSmsVerify = $authMgr->verifyCodeForBooking($form->getMobile(), $form->getVerifyCode(), $userHostIp);
                if ($authSmsVerify->isValid() === false) {
                    // sms verify code is not valid.
                    $form->addError('verify_code', $authSmsVerify->getError('code'));

                    return false;
                }
            }
            // create new Booking model and save into db.
            $model = new Booking();
            $model->setAttributes($form->getSafeAttributes());

            if ($model->save() === false) {
                // error occured while saving into db.
                $form->addErrors($model->getErrors());

                return ($form->hasErrors() === false);
            } else {
                // deactive current smsverify.                
                if (isset($authSmsVerify)) {
                    $authMgr->deActiveAuthSmsVerify($authSmsVerify);
                }
                // Create BookingFile from $_FILES.
                // saves uploaded files into filesystem and db.
                $form->id = $model->getId();
                $this->createBookingFiles($model->getId(), $model->getUserId());
            }
        }
        return ($form->hasErrors() === false);
    }

    public function createBookingFiles($bookingId, $userId) {
        $uploadField = BookingFile::model()->file_upload_field;
        $files = EUploadedFile::getInstancesByName($uploadField);

        $output = array();
        if (arrayNotEmpty($files)) {
            foreach ($files as $file) {
                $output[] = $this->saveBookingFile($file, $bookingId, $userId);
            }
        }
        return $output;
    }

    /**
     * Get EUploadedFile from $_FILE. Create BookingFile model. Save file in filesystem. Save model in db.
     * @param EUploadedFile $file EUploadedFile::getInstances()
     * @param integer $bookingId Booking.id     
     * @return BookingFile 
     */
    private function saveBookingFile($file, $bookingId, $userid) {
        $bFile = new BookingFile();
        $bFile->initModel($bookingId, $userid, $file);
        $bFile->saveModel();

        return $bFile;
    }

    public function loadIBooking($id, $with = null) {
        if (is_null($with)) {
            $with = array('owner', 'facultyBooked', 'doctorBooked', 'hospitalBooked', 'hospitalDeptBooked', 'bookingFiles');
        }
        $model = $this->loadBookingById($id, $with);
        if (isset($model)) {
            $ibooking = new IBooking();
            $ibooking->initModel($model);
            // BookingFiles.
            if (in_array('bookingFiles', $with)) {
                $bookingFiles = $model->getBookingFiles();
                $ibooking->addFiles($bookingFiles);
                $ibooking->setCountFiles(count($bookingFiles)); // count no. of BookingFiles.
            }
            return $ibooking;
        } else {
            return null;
        }
    }

    public function loadBookingById($id, $with = null) {
        $model = Booking::model()->getById($id, $with);
        if (is_null($model)) {
            throw new CHttpException(404, 'Record is not found.');
        }
        return $model;
    }

    public function loadBookingByRefNo($refno) {
        $model = MedicalRecordBooking::model()->getByRefNo($refno);
        if (is_null($model)) {
            throw new CHttpException(404, 'Record is not found.');
        }
        return $model;
    }

    /**
     * 
     * @param type $mobile
     * @param type $code
     * @param type $userIp
     * @return type AuthSmsVerify
     */
    private function checkVerifyCode($mobile, $code, $userIp = null) {
        $authMgr = new AuthManager();
        $actionType = AuthSmsVerify::ACTION_BOOKING;
        return $authMgr->verifyAuthSmsCode($mobile, $code, $actionType, $userIp);
    }

}
