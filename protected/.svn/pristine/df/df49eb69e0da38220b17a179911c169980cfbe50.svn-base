<?php

/**
 * Description of salesTansactionManager
 *
 * @author Administrator
 */
class PayManager {

    public function createSalesOrderFromBk($model) {
        $salseOrder = new SalesOrder();
        $salseOrder->initFromBk($model);
        return $salseOrder;
    }

    public function createSalesOrderFromPb($model) {
        $salseOrder = new SalesOrder();
        $salseOrder->initFromPb($model);
        return $salseOrder;
    }

    public function doPingxxPay($refNo, $channel) {
        $order = SalesOrder::model()->getByAttributes(array('ref_no' => $refNo));
        if ($order === NULL) {
            //exception
        }
        $payment = new SalesPayment();
        $payment->initFromOrder($order, $channel);
        $amount = intval($payment->getBillAmount() * 100);
        $orderNo = $payment->getUid();
        $subject = $order->getSubject();
        $body = $order->getDescription();
        $extra = $this->createPingxxExtra($payment, $channel);
        \Pingpp\Pingpp::setApiKey('sk_test_W14qv9uPGuP4rbrnHKizLOaT');
        $requestArray = array(
            'subject' => $subject,
            'body' => $body,
            'amount' => 100,
            'order_no' => $orderNo,
            'currency' => 'cny',
            'extra' => $extra,
            'channel' => $channel,
            'client_ip' => $_SERVER['REMOTE_ADDR'],
            'app' => array('id' => 'app_SWv9qLSGWj1GKqbn')
        );
//        $requestData = CJSON::encode($requestArray);

        if ($payment->save() === false) {
            //exception
        }

        try {
            $ch = \Pingpp\Charge::create($requestArray);
            var_dump($ch);
            echo $ch['id'];
            exit;
            $payment->setPingChargeId($ch['id']);
            $payment->update();
            $paymentData = new SalesPaymentData();
            $paymentData->initFromPayment($payment, $ch);
            if ($paymentData->save() === false) {
                
            }
//            var_dump($requestArray);echo '---------------------------------------------------------------<br>';
//            var_dump($ch['credential']['alipay_pc_direct']);
//            echo $ch;exit;
            echo $ch;
            Yii::app()->end();
        } catch (\Pingpp\Error\Base $e) {
            header('Status: ' . $e->getHttpStatus());
            echo($e->getHttpBody());
        }
    }

    public function createPingxxExtra(SalesPayment $payment, $channel) {
        //$extra 在使用某些渠道的时候，需要填入相应的参数，其它渠道则是 array() .具体见以下代码或者官网中的文档。其他渠道时可以传空值也可以不传。
        $extra = array();
        switch ($channel) {
            case 'alipay_pc_direct':
                $extra = array(
                    'success_url' => 'http://192.168.31.205/myzd/test/success'
//                    'cancel_url' => 'http://192.168.31.205/myzd/test/cancel'
                );
                break;
            case 'upmp_wap':
                $extra = array(
                    'result_url' => 'http://192.168.31.205/myzd/result?code='
                );
                break;
            case 'bfb_wap':
                $extra = array(
                    'result_url' => 'http://192.168.31.205/myzd/result?code=',
                    'bfb_login' => true
                );
                break;
            case 'upacp_wap':
                $extra = array(
                    'result_url' => 'http://192.168.31.205/myzd/result'
                );
                break;
            case 'wx_pub':
                $extra = array(
                    'open_id' => 'Openid'
                );
                break;
            case 'wx_pub_qr':
                $extra = array(
                    'product_id' => 'Productid'
                );
                break;
            case 'yeepay_wap':
                $extra = array(
                    'product_category' => '1',
                    'identity_id' => 'your identity_id',
                    'identity_type' => 1,
                    'terminal_type' => 1,
                    'terminal_id' => 'your terminal_id',
                    'user_ua' => 'your user_ua',
                    'result_url' => 'http://192.168.31.205/myzd/result'
                );
                break;
            case 'jdpay_wap':
                $extra = array(
                    'success_url' => 'http://192.168.31.205/myzd',
                    'fail_url' => 'http://192.168.31.205/myzd',
                    'token' => 'dsafadsfasdfadsjuyhfnhujkijunhaf'
                );
                break;
        }
        return $extra;
    }

    public function updateDataAfterTradeSuccess(SalesPayment $payment,$post) {
        $order = SalesOrder::model()->getById($payment->order_id);
        $paymentData = SalesPaymentData::model()->getByAttributes(array('payment_id' => $payment->id));
        if(isset($order) && isset($paymentData)){
            $now = new CDbExpression('NOW()');
            $payment->setChannelTradeNo($post['data']['object']['extra']['transaction_no']);
            $payment->setPaymentStatus(1);
            $payment->update();
            $order->setIsPaid(1);
            $order->setDateClosed($now);
            $order->update();
            $paymentData->setReturnData($post);
            $paymentData->setDateReturn($now);
            $paymentData->update();
        }
    }

    public function updateDataAfterTradeFail(SalesPayment $payment) {
        $order = SalesOrder::model()->getById($payment->order_id);
        $paymentData = SalesPaymentData::model()->getByAttributes(array('payment_id' => $payment->id));
        if(isset($order) && isset($paymentData)){
            $now = new CDbExpression('NOW()');
            $payment->setChannelTradeNo($post['data']['object']['extra']['transaction_no']);
            $payment->setPaymentStatus(2);
            $payment->update();
            $order->setIsPaid(0);
            $order->setDateClosed($now);
            $order->update();
            $paymentData->setReturnData($post);
            $paymentData->setDateReturn($now);
            $paymentData->setErrorCode($post);
            $paymentData->setErrorMsg($post);
            $paymentData->update();
        }
    }

}
