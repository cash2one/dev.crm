<?php

class DoctorController extends MobiledoctorController {

    private $model; // Doctor model
    private $patient;   // PatientInfo model
    private $patientMR; // PatientMR model

    public function filterPatientContext($filterChain) {
        $patientId = null;
        if (isset($_GET['id'])) {
            $patientId = $_GET['id'];
        } else if (isset($_POST['patient']['id'])) {
            $patientId = $_POST['patient']['id'];
        }

        $this->loadPatientInfoById($patientId);

        //complete the running of other filters and execute the requested action.
        $filterChain->run();
    }

    /**
     * @NOTE call this method after filterUserDoctorContext.
     * @param type $filterChain
     */
    public function filterPatientCreatorContext($filterChain) {
        $patientId = null;
        if (isset($_GET['pid'])) {
            $patientId = $_GET['pid'];
        } elseif (isset($_GET['id'])) {
            $patientId = $_GET['id'];
        } else if (isset($_POST['patient']['id'])) {
            $patientId = $_POST['patient']['id'];
        }
        $creator = $this->loadUser();

        $this->loadPatientInfoByIdAndCreatorId($patientId, $creator->getId());
        $filterChain->run();
    }

    /**
     * @NOTE call this method after filterUserDoctorContext.
     * @param type $filterChain
     */
    public function filterPatientMRCreatorContext($filterChain) {
        $mrid = null;
        if (isset($_GET['mrid'])) {
            $mrid = $_GET['mrid'];
        } elseif (isset($_POST['patientbooking']['mrid'])) {
            $mrid = $_POST['patientbooking']['mrid'];
        }
        $user = $this->loadUser();
        $this->loadPatientMRByIdAndCreatorId($mrid, $user->getId());
        $filterChain->run();
    }

    /**
     * @return array action filters
     */
    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
            'postOnly + delete', // we only allow deletion via POST request
            'userDoctorContext + profile ajaxProfile createPatient ajaxCreatePatient createPatientMR createBooking view account',
            'patientContext + createPatientMR',
            'patientCreatorContext + createBooking'
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules() {
        return array(
            array('allow', // allow all users to perform 'index' and 'view' actions
                'actions' => array('register', 'login'),
                'users' => array('*'),
            ),
            array('allow', // allow authenticated user to perform 'create' and 'update' actions
                'actions' => array('logout', 'view', 'profile', 'createPatient', 'createPatientMR', 'createBooking', 'ajaxProfile', 'ajaxUploadCert', 'ajaxCreatePatient', 'ajaxCreatePatientMR', 'ajaxUploadMRFile', 'ajaxCreateBooking', 'bookinglist', 'booking', 'patientFiles', 'doctorInfo', 'doctorCerts', 'account','delectDoctorCert','doctorPatientList','doctorPatientInfo'),
                'users' => array('@'),
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }
    
    
    public function actionAccount(){
        //$user = $this->loadUser();
        $this->render('personal');
    }

    //查询医生的签约信息
    public function actionBookinglist() {
        //$this->headerUTF8();
        //是否手机app
        $json = false;
        $userId = $this->getCurrentUserId();
        $pagesize = Yii::app()->request->getQuery('pagesize', 10);
        $page = Yii::app()->request->getQuery('page', 1);
        //service层
        $apisvc = new ApiViewDoctorPatientBookingList($userId, $pagesize, $page);
        //调用父类方法将数据返回
        $output = $apisvc->loadApiViewData();
        if ($json) {
            $this->renderJsonOutput($output);
        } else {
            $this->render('bookinglist', array(
                'data' => $output
            ));
        }
    }

    //医生签约病人详细信息
    public function actionBooking($id) {
        //是否手机
        $json = false;
        $userId = $this->getCurrentUserId();
        //$Id, $creatorId
        $apisvc = new ApiViewDoctorOneBooking($id, $userId);
        $output = $apisvc->loadApiViewData();
        if ($json) {
            $this->renderJsonOutput($output);
        } else {
            $this->render('bookinginfo', array(
                'data' => $output
            ));
        }
    }

    //异步加载病人病历图片
    public function actionPatientFiles($mrId) {
        //是否手机
        $json = true;
        $userId = $this->getCurrentUserId();
        //$mrId = Yii::app()->request->getQuery('mrId');
        $apisvc = new ApiViewFilesOfPatient($mrId, $userId);
        $output = $apisvc->loadApiViewData();
        if ($json) {
            $this->renderJsonOutput($output);
        } else {
            $this->render('patientFiles', array(
                'data' => $output
            ));
        }
    }

    //医生信息查询
    public function actionDoctorInfo() {
        $json = false;
        $userId = $this->getCurrentUserId();
        $apisvc = new ApiViewDoctorInfo($userId);
        $output = $apisvc->loadApiViewData();
        if ($json) {
            $this->renderJsonOutput($output);
        } else {
            $this->render('doctorInfo', array(
                'data' => $output
            ));
        }
    }

    //异步加载医生证明
    public function actionDoctorCerts($id) {
        $json = true;
        $apisvc = new ApiViewDoctorFiles($id);
        $output = $apisvc->loadApiViewData();
        if ($json) {
            $this->renderJsonOutput($output);
        } else {
            $this->render('doctorCerts', array(
                'data' => $output
            ));
        }
    }
    
    
    //异步删除医生证明图片
    public function actionDelectDoctorCert($id){
        $userId = $this->getCurrentUserId();
        $userMgr = new UserManager();
        $output = $userMgr->delectDoctorCertByIdAndUserId($id,$userId);
        $this->renderJsonOutput($output);
    }
    
    //我的患者列表信息查询
    public function actionDoctorPatientList(){
        $userId = $this->getCurrentUserId();
        $pagesize = Yii::app()->request->getQuery('pagesize', 10);
        $page = Yii::app()->request->getQuery('page', 1);
          //service层
        $apisvc = new ApiViewDoctorPatientList($userId, $pagesize, $page);
        //调用父类方法将数据返回
        $output = $apisvc->loadApiViewData();
       // $this->renderJsonOutput($output);
        $this->render('doctorPatientList', array(
            'data' => $output
        ));
    } 
    
    
    //我的患者详情
     public function actionDoctorPatientInfo($id){
        $userId = $this->getCurrentUserId();
        //service层
        $apisvc = new ApiViewDoctorPatientInfo($id,$userId);
        //调用父类方法将数据返回
        $output = $apisvc->loadApiViewData();
        $this->render('doctorPatientInfo', array(
            'data' => $output
        ));
     }
 
    
    //修改密码
    public function actionChangePassword() {
        $user = $this->getCurrentUser();
        $form = new UserPasswordForm('new');
        $form->initModel($user);
        $this->performAjaxValidation($form);
        if (isset($_POST['UserPasswordForm'])) {
            $form->attributes = $_POST['UserPasswordForm'];
            $userMgr = new UserManager();
            $success = $userMgr->doChangePassword($form);
            if ($this->isAjaxRequest()) {
                if ($success) {
                    //do anything here
                    echo CJSON::encode(array(
                        'status' => 'true'
                    ));
                    Yii::app()->end();
                } else {
                    $error = CActiveForm::validate($form);
                    if ($error != '[]') {
                        echo $error;
                    }
                    Yii::app()->end();
                }
            } else {
                if ($success) {
                    // $this->redirect(array('user/account'));
                    $this->setFlashMessage('user.password', '密码修改成功！');
                }
            }
        }
        $this->render('changePassword', array(
            'model' => $form
        ));
    }
    
    


    public function actionView() {
        // 我的患者
        // 我的认证信息
        // 账号
        $this->redirect(array('patient/create'));
    }

    public function actionRegister() {
        $userRole = StatCode::USER_ROLE_DOCTOR;
        $form = new UserRegisterForm();
        $form->role = $userRole;
        $form->terms = 1;
        //$form->sms_verify_code = 123456;

        $this->performAjaxValidation($form);

        if (isset($_POST['UserRegisterForm'])) {
            $values = $_POST['UserRegisterForm'];
            $form->setAttributes($values, true);

            $userMgr = new UserManager();
            $userMgr->registerNewUser($form);
            if ($form->hasErrors() === false) {
                // success                
                $loginForm = $userMgr->autoLoginUser($form->username, $form->password, $userRole, 1);
                //$this->redirect($this->getReturnUrl());
                //$this->redirect($this->returnUrl);
                 $this->redirect(array('profile'));
            }
        }

        $this->render('register', array(
            'model' => $form,
        ));
    }


    public function actionAjaxUploadCert() {
        $output = array('status' => 'no');

        if (isset($_POST['doctor'])) {
            $values = $_POST['doctor'];
            $doctorMgr = new DoctorManager();
            if (isset($values['id']) === false) {
                // ['doctor']['id'] is missing.
                $output['status'] = 'no';
                $output['error'] = 'invalid parameters';
                $this->renderJsonOutput($output);
            }
            $doctorId = $values['id'];
            $doctor = $doctorMgr->loadDoctorById($doctorId);
            if (isset($doctor) === false) {
                // Doctor record is not found in db.
                $output['status'] = 'no';
                $output['errors'] = 'invalid id';
                $this->renderJsonOutput($output);
            } else {
                $output['doctorId'] = $doctorId;
                $ret = $doctorMgr->createDoctorCert($doctorId);
                if (isset($ret['error'])) {
                    $output['status'] = 'no';
                    $output['error'] = $ret['error'];
                    $output['file'] = '';
                } else {
                    // create file output.
                    $fileModel = $ret['filemodel'];
                    $data = new stdClass();
                    $data->id = $fileModel->getId();
                    $data->userId = $fileModel->getUserId();
                    $data->fileUrl = $fileModel->getAbsFileUrl();
                    $data->tnUrl = $fileModel->getAbsThumbnailUrl();
                    $data->deleteUrl = $this->createUrl('doctor/deleteCert', array('id' => $fileModel->getId()));

                    $output['status'] = 'ok';
                    $output['file'] = $data;
                    //$output['redirectUrl'] = $this->createUrl("home/index");
                }
            }
        } else {
            $output['error'] = 'invalid parameters.';
        }

        $this->renderJsonOutput($output);
    }

    public function actionAjaxProfile() {
        $output = array('status' => 'no');
        if (isset($_POST['doctor'])) {
            $values = $_POST['doctor'];
            //@TODO needs to verify if user_id == Doctor.user_id.
            //    $doctorMgr = new DoctorManager();
            $regionMgr = new RegionManager();

            $user = $this->loadUser();
            $userId = $user->getId();
            $doctorProfile = $user->getUserDoctorProfile();
            if (is_null($doctorProfile)) {
                $doctorProfile = new UserDoctorProfile();
            }
            $doctorProfile->setAttributes($values, true);
            // Doctor.name.
            /*
              if (isset($values['name']) === false) {
              $doctorProfile->name = $doctorProfile->getName();
              }
             * 
             */
            // user_id.
            $doctorProfile->user_id = $userId;
            // UserDoctorProfile.state_name.
            $state = $regionMgr->loadRegionStateById($doctorProfile->state_id);
            if (isset($state)) {
                $doctorProfile->state_name = $state->getName();
            }
            // UserDoctorProflie.city_name;
            $city = $regionMgr->loadRegionCityById($doctorProfile->city_id);
            if (isset($city)) {
                $doctorProfile->city_name = $city->getName();
            }
            if ($doctorProfile->save()) {
                $output['status'] = 'ok';
                $output['doctor']['id'] = $doctorProfile->getId();
            } else {
                $output['status'] = 'no';
                $output['errors'] = $doctorProfile->getErrors();
            }
        }
        $this->renderJsonOutput($output);
    }

    public function actionProfile() {
        $user = $this->loadUser();
        $doctorProfile = $user->getUserDoctorProfile();
        $form = new UserDoctorProfileForm();
        $form->initModel($doctorProfile);
        $form->terms = 1;

        //@TODO.
        //    $testData = $this->createDoctorTestData();
        //    $form->setAttributes($testData, true);

        $this->render('profile', array(
            'model' => $form,
        ));
    }

    /**
     * @DELETE
     */
    public function actionCreatePatient() {
        $this->redirect(array('patient/create'));
    }

    public function actionLogout() {
        Yii::app()->user->logout();
        $this->redirect(array('doctor/login'));
    }

    public function actionLogin() {

        $form = new UserLoginForm();
        $form->role = StatCode::USER_ROLE_DOCTOR;
        $form->rememberMe = 1;

        // collect user input data
        if (isset($_POST['UserLoginForm'])) {
            $values = $_POST['UserLoginForm'];
            $form->setAttributes($values, true);
            $userMgr = new UserManager();
            $userMgr->doLogin($form);
            if ($form->hasErrors() === false) {
                //$this->redirect($this->getReturnUrl());                
                $this->redirect(array('patient/create'));
            }
        }

        $this->render("login", array(
            'model' => $form
        ));
    }
    
    
    /**
     * 手机用户登录
     */
    public function actionMobileLogin(){
        $form = new UserCerifyCodeLoginForm();
        $form->role = StatCode::USER_ROLE_DOCTOR;
         if (isset($_POST['UserLoginForm'])) {
            $values = $_POST['UserLoginForm'];
            $form->setAttributes($values, true);
            $userMgr = new UserManager();
            $userMgr->mobileLogin($form);
            //登录成功 页面跳转
            if ($form->hasErrors() === false) {
                $this->redirect(array('patient/create'));
            }
        }
        //失败 则返回登录页面
         $this->render("login", array(
            'model' => $form
        ));
    }
    
    

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Doctor the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        if ($this->model === null) {
            $this->model = Doctor::model()->getById($id);
            if ($this->model === null)
                throw new CHttpException(404, 'The requested page does not exist.');
        }

        return $this->model;
    }

    protected function registerDoctor(DoctorForm $form) {
        if (isset($_POST['DoctorForm'])) {
            $values = $_POST['DoctorForm'];
            $form->setAttributes($values);
            $form->hp_dept_name = $form->faculty;

            //$form->hospital_id = null;
            $doctorMgr = new DoctorManager();
            //if ($doctorMgr->createDoctor($form, false)) {   // do not check verify_code.
            if ($doctorMgr->createDoctor($form)) {
                // Send email to inform admin.
                $doctorId = $form->getId();
                $with = array('doctorCerts', 'doctorHospital', 'doctorHpDept', 'doctorCity');
                $idoctor = $doctorMgr->loadIDoctor($doctorId, $with);

                if (isset($idoctor)) {
                    $emailMgr = new EmailManager();
                    $emailMgr->sendEmailDoctorRegister($idoctor);
                }
// store successful message id in session.
                $this->setFlashMessage("doctor.success", "success");
                $this->refresh(true);     // terminate and refresh the current page.
            } else {
                
            }
        }
    }
    
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'user-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    private function createDoctorTestData() {
        $data = array(
            'fullname' => '小明',
            'hospital_name' => '北京医院',
            'hp_dept_name' => '肿瘤科',
            'state_id' => '1',
            'city_id' => '1',
            'medical_title' => '1',
            'academic_title' => '1',
            'terms' => 1,
        );
        return $data;
    }

}
