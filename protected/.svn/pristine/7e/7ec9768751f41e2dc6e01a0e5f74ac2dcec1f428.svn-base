<?php

class BookingManager {
    /*     * ****** Api 2.0 ******* */

    public function apiCreateBooking(User $user, $values, $checkVerifyCode = true, $sendEmail = true) {
        $output = array('status' => false);

        // create a new Booking and save into db.        
        $form = new AppBookingForm();
        $form->user_id = $user->getId();
        $form->setAttributes($values);
        $form->status = Booking::STATUS_NEW;
        // create Booking and save into db.
        $this->createAppBooking($form);
        if ($form->hasErrors()) {
            $output['errors'] = $form->getFirstErrors();
            return $output;
        }

        // load this booking from db and convert it to IBooking model for viewing.
        $ibooking = $this->loadIBooking($form->id);
        try {
            if ($sendEmail && isset($ibooking)) {
                // Send email to inform admin.                
                if (isset($ibooking)) {
                    $emailMgr = new EmailManager();
                    $emailMgr->sendEmailQuickBooking($ibooking);
                }
            }
        } catch (CException $ex) {
            Yii::log($ex->getMessage(), CLogger::LEVEL_ERROR, 'BookingManager.apiCreateBooking');
            $output['error_msg'] = "发送电邮出错";
        }
        $output['status'] = true;
        $output['msg'] = '预约成功';
        $output['booking'] = $ibooking;

        return $output;
    }

    /**
     * single upload of BookingFile.
     * @param array $values array('booking_id'=>$bid, 'username'=>$mobile, 'token'=>$token);
     * @param type $file
     * @return string
     */
    public function apiCreateBookingFile(User $user, $values, EUploadedFile $file) {
        $output = array('status' => false);

        // validates input parameters.
        if (isset($values['booking_id']) === false) {
            $output['errors']['error_code'] = ErrorList::BAD_REQUEST;
            $output['errors']['error_msg'] = 'Wrong parameters.';
            return $output;
        }
        $bookingId = $values['booking_id'];

        $userId = $user->getId();
        // TODO: load $booking from db by $bookingId.
        // check if $booking.user_id == $user.id;
        $booking = Booking::model()->getByIdAndUserId($bookingId, $userId);
        if (is_null($booking)) {
            $output['errors']['error_code'] = ErrorList::UNAUTHORIZED;
            $output['errors']['error_msg'] = '您没有权限执行此操作';
            return $output;
        }
        // create BookingFile and save into db.
        $bookingFile = $this->saveBookingFile($file, $bookingId, $userId);
        if ($bookingFile->hasErrors()) {
            $output['errors'] = $bookingFile->getFirstErrors();
            return $output;
        } else {
            // creates IBookingFile model for json output.
            $bookingFile = BookingFile::model()->getById($bookingFile->getId());
            $ibookingFile = new IBookingFile();
            $ibookingFile->initModel($bookingFile);
            $output['status'] = true;
            $output['bookingFile'] = $ibookingFile;
        }
        return $output;
    }

    public function apiLoadIBookingJsonByUser(User $user, $bookingId) {
        $ibooking = $this->loadIBookingByUser($user, $bookingId);
        $output['booking'] = $ibooking;

        return $output;
    }

    public function apiLoadAllIBookingsJsonByUser(User $user, $options = null) {
        $ibookingList = $this->loadAllIBookingsByUser($user, $options);
        $output['countBookings'] = count($ibookingList);
        $output['bookings'] = $ibookingList;
        return $output;
    }

    public function loadAllIBookingsByUser(User $user, $options = null) {
        $ibookingList = array();
        $with = array("owner", "bookingFiles", "facultyBooked", "doctorBooked", "expertTeamBooked", "hospitalDeptBooked", "hospitalBooked");
        $bookings = $this->loadAllBookingsByUser($user, $with, $options);
        if (arrayNotEmpty($bookings)) {
            foreach ($bookings as $booking) {
                $ibookingList[] = $this->convertToIBooking($booking, $with);
            }
        }
        return $ibookingList;
    }

    public function loadIBookingByUser(User $user, $bookingId) {
        $with = array("owner", "bookingFiles", "facultyBooked", "doctorBooked", "expertTeamBooked", "hospitalDeptBooked", "hospitalBooked");
        $booking = Booking::model()->getByIdAndUserId($bookingId, $user->getId(), $with);
        if (is_null($booking)) {
            return null;
        } else {
            $ibooking = $this->convertToIBooking($booking, $with);
            return $ibooking;
        }
    }

    public function loadAllBookingsByUser($user, $with = null, $options = null) {
        if (is_null($with)) {
            $with = array("owner", "bookingFiles", "facultyBooked", "doctorBooked", "expertTeamBooked", "hospitalDeptBooked", "hospitalBooked");
        }
        return Booking::model()->getAllByUserIdOrMobile($user->getId(), $user->getMobile(), $with, $options);
    }

    public function createAppBooking(AppBookingForm $form) {
        if ($form->validate()) {
            // create new Booking model and save into db.
            $model = new Booking();
            $model->setAttributes($form->getSafeAttributes());

            if ($model->save() === false) {
                // error occured while saving into db.
                $form->addErrors($model->getErrors());

                return ($form->hasErrors() === false);
            } else {
                // Create BookingFile from $_FILES.
                // saves uploaded files into filesystem and db.
                $form->id = $model->getId();
                $this->createBookingFiles($model->getId(), $model->getUserId());
            }
        }
        return ($form->hasErrors() === false);
    }

    public function createBooking(BookingForm $form, $checkVerifyCode = true) {
        if ($form->validate()) {
            if ($checkVerifyCode) {
                // Verifies AuthSmsVerify by using $mobile & $verifyCode.        
                $userHostIp = Yii::app()->request->getUserHostAddress();
                $authMgr = new AuthManager();
                $authSmsVerify = $authMgr->verifyCodeForBooking($form->getMobile(), $form->getVerifyCode(), $userHostIp);
                if ($authSmsVerify->isValid() === false) {
                    // sms verify code is not valid.
                    $form->addError('verify_code', $authSmsVerify->getError('code'));

                    return false;
                }
            }
            // create new Booking model and save into db.
            $model = new Booking();
            $model->setAttributes($form->getSafeAttributes());

            if ($model->save() === false) {
                // error occured while saving into db.
                $form->addErrors($model->getErrors());

                return ($form->hasErrors() === false);
            } else {
                // deactive current smsverify.                
                if (isset($authSmsVerify)) {
                    $authMgr->deActiveAuthSmsVerify($authSmsVerify);
                }
                // Create BookingFile from $_FILES.
                // saves uploaded files into filesystem and db.
                $form->id = $model->getId();
                $this->createBookingFiles($model->getId(), $model->getUserId());
            }
        }
        return ($form->hasErrors() === false);
    }

    public function createBookingFiles($bookingId, $userId) {
        $uploadField = BookingFile::model()->file_upload_field;
        $files = EUploadedFile::getInstancesByName($uploadField);

        $output = array();
        if (arrayNotEmpty($files)) {
            foreach ($files as $file) {
                $output[] = $this->saveBookingFile($file, $bookingId, $userId);
            }
        }
        return $output;
    }

    /**
     * Get EUploadedFile from $_FILE. Create BookingFile model. Save file in filesystem. Save model in db.
     * @param EUploadedFile $file EUploadedFile::getInstances()
     * @param integer $bookingId Booking.id     
     * @return BookingFile 
     */
    private function saveBookingFile($file, $bookingId, $userid) {
        $bFile = new BookingFile();
        $bFile->initModel($bookingId, $userid, $file);
        $bFile->saveModel();

        return $bFile;
    }

    public function loadIBooking($id, $with = null) {
        if (is_null($with)) {
            $with = array('owner', 'facultyBooked', 'doctorBooked', 'hospitalBooked', 'hospitalDeptBooked', 'bookingFiles');
        }
        $model = $this->loadBookingById($id, $with);
        if (isset($model)) {
            $ibooking = $this->convertToIBooking($model, $with);
            return $ibooking;
        } else {
            return null;
        }
    }

    public function loadBookingById($id, $with = null) {
        return Booking::model()->getById($id, $with);
    }

    public function loadBookingByRefNo($refno) {
        return MedicalRecordBooking::model()->getByRefNo($refno);
        /*
          if (is_null($model)) {
          throw new CHttpException(404, 'Record is not found.');
          }
          return $model;
         * 
         */
    }

    /**
     * 
     * @param type $mobile
     * @param type $code
     * @param type $userIp
     * @return type AuthSmsVerify
     */
    private function checkVerifyCode($mobile, $code, $userIp = null) {
        $authMgr = new AuthManager();
        $actionType = AuthSmsVerify::ACTION_BOOKING;
        return $authMgr->verifyAuthSmsCode($mobile, $code, $actionType, $userIp);
    }

    /**
     * 
     * @param Booking $model
     * @param array $with array('owner','bookingFIles','doctor')
     * @return \IBooking|\IExpertTeam
     */
    public function convertToIBooking(Booking $model, $with = null) {
        if (isset($model)) {
            $imodel = new IBooking();
            $imodel->initModel($model);
            $imodel->addRelatedModel($model, $with);
            return $imodel;
        } else {
            return null;
        }
    }

}
