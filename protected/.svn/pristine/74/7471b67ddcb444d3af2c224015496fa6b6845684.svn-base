<?php

/**
 * This is the model class for table "doctor_avatar".
 *
 * The followings are the available columns in table 'doctor_avatar':
 * @property integer $id
 * @property string $uid
 * @property integer $doctor_id
 * @property string $image_type
 * @property string $image_url
 * @property string $thumbnail_url
 * @property integer $display_order
 * @property string $date_created
 * @property string $date_updated
 * @property string $date_deleted
 *
 * The followings are the available model relations:
 * @property Doctor $doctor
 */
class DoctorAvatar extends EFileModel {

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'doctor_avatar';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('uid, doctor_id, image_url, thumbnail_url', 'required'),
            array('doctor_id, display_order', 'numerical', 'integerOnly' => true),
            array('uid', 'length', 'max' => 40),
            array('image_type', 'length', 'max' => 10),
            array('image_url, thumbnail_url', 'length', 'max' => 255),
            array('date_created, date_updated, date_deleted', 'safe'),
            // The following rule is used by search().
            // @todo Please remove those attributes that should not be searched.
            array('id, uid, doctor_id, image_type, image_url, thumbnail_url, display_order, date_created, date_updated, date_deleted', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'doctor' => array(self::BELONGS_TO, 'Doctor', 'doctor_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'uid' => 'Uid',
            'doctor_id' => 'Doctor',
            'image_type' => 'Image Type',
            'image_url' => 'Image Url',
            'thumbnail_url' => 'Thumbnail Url',
            'display_order' => 'Display Order',
            'date_created' => 'Date Created',
            'date_updated' => 'Date Updated',
            'date_deleted' => 'Date Deleted',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     *
     * Typical usecase:
     * - Initialize the model fields with values from filter form.
     * - Execute this method to get CActiveDataProvider instance which will filter
     * models according to data in model fields.
     * - Pass data provider to CGridView, CListView or any similar widget.
     *
     * @return CActiveDataProvider the data provider that can return the models
     * based on the search/filter conditions.
     */
    public function search() {
        // @todo Please modify the following code to remove attributes that should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('uid', $this->uid, true);
        $criteria->compare('doctor_id', $this->doctor_id);
        $criteria->compare('image_type', $this->image_type, true);
        $criteria->compare('image_url', $this->image_url, true);
        $criteria->compare('thumbnail_url', $this->thumbnail_url, true);
        $criteria->compare('display_order', $this->display_order);
        $criteria->compare('date_created', $this->date_created, true);
        $criteria->compare('date_updated', $this->date_updated, true);
        $criteria->compare('date_deleted', $this->date_deleted, true);

        return new CActiveDataProvider($this, array(
                    'criteria' => $criteria,
                ));
    }

    /**
     * Returns the static model of the specified AR class.
     * Please note that you should have this exact method in all your CActiveRecord descendants!
     * @param string $className active record class name.
     * @return DoctorAvatar the static model class
     */
    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function createUID(){
        return parent::createUID();
    }
    
    public function getThumbnailUrl() {
        if (strStartsWith($this->thumbnail_url, 'http://')) {
            return $this->thumbnail_url;
        } else {
            return Yii::app()->getBaseUrl(true). '/' . $this->thumbnail_url;
        }
    }

    public function getImageUrl() {
        if (strStartsWith($this->image_url, 'http://')) {
            return $this->image_url;
        } else {
            return  Yii::app()->getBaseUrl(true). '/' . $this->image_url;
        }
    }

}
