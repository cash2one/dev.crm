<?php

/* Change apache\bin\php.ini settings to allow larger files.
 * post_max_size = 16m
 * upload_max_filesize = 16M
 */

/**
 * This is the model class for base file model.
 *
 * @property integer $id
 * @property string $uid
 * @property string $file_ext
 * @property string $file_url
 * @property string $thumbnail_url
 * @property integer $file_size
 * @property string $base_url
 * @property integer $display_order
 * @property string $date_created
 * @property string $date_updated
 * @property string $date_deleted
 * 
 */
abstract class EFileModel extends EActiveRecord {

    public $file;   // EUploadedFile.
    public $file_upload_field = 'files';
    // const THUMB_POSTFIX = 'tn';
    //  const IMAGE_JPG='jpg';
    //  protected $standard_image_width = 1024;
    //  protected $standard_image_height = 1024;
    protected $thumbnail_width = 90;
    protected $thumbnail_height = 127;

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('uid, report_type, file_name, file_url', 'required'),
            array('file_size, display_order', 'numerical', 'integerOnly' => true),
            array('uid', 'length', 'is' => 32),
            array('file_name, thumbnail_name', 'length', 'max' => 40),
            array('file_ext, mime_type', 'length', 'max' => 10),
            array('file_url, thumbnail_url, base_url', 'length', 'max' => 255),
            array('date_created, date_updated, date_deleted', 'safe'),
                // The following rule is used by search().
                // @todo Please remove those attributes that should not be searched.
                //array('id, uid, file_ext, file_url, thumbnail_url, display_order, date_created, date_updated, date_deleted', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'uid' => 'UID',
            'file_ext' => 'File Extention',
            'mime_type' => 'MIME Type',
            'file_name' => 'File Name',
            'file_url' => 'File Url',
            'file_size' => 'File Size',
            'thumbnail_name' => 'Thumbnail Name',
            'thumbnail_url' => 'Thumbnail Url',
            'display_order' => 'Display Order',
            'date_created' => 'Date Created',
            'date_updated' => 'Date Updated',
            'date_deleted' => 'Date Deleted',
        );
    }

    /**
     * 
     * @param EUploadedFile $file
     */
    public function setFileAttributes($file) {
        $this->createUID();
        $this->file = $file;
        $this->setFileExtension($file->extensionName);
        $this->setFileSize($file->size);
        $this->setMimeType($file->type); //Since this MIME type is not checked on the server side, do not take this value for granted. Instead, use CFileHelper::getMimeType to determine the exact MIME type.
        $this->setFileName($this->uid . '.' . $this->getFileExtension());
        $this->setThumbnailName($this->uid . 'tn.' . $this->getFileExtension());
        //URL Path.
        $fileUploadDir = $this->getFileUploadPath();
        $this->setFileUrl($fileUploadDir . '/' . $this->getFileName());
        $this->setThumbnailUrl($fileUploadDir . '/' . $this->getThumbnailName());
        $this->setBaseUrl(Yii::app()->getBaseUrl(true));
    }

    /**
     * gets the relative file upload root path.
     * @return type 
     */
    public function getFileUploadRootPath() {
        return '';
    }

    /**
     * gets the file upload path of given foler name.
     * @param type $folderName
     * @return type 
     */
    public function getFileUploadPath($folderName = null) {
        if ($folderName === null) {
            return $this->getFileUploadRootPath();
        } else {
            return ($this->getFileUploadRootPath() . $folderName);
        }
    }

    /**
     * get File System Path
     *
     * @param string        	
     * @return string
     */
    public function getFileSystemUploadPath($folderName = null) {
        return (Yii::getPathOfAlias('webroot') . DIRECTORY_SEPARATOR . $this->getFileUploadPath($folderName));
    }

    public function getFileLocation() {
        return $this->getFileSystemUploadPath() . DIRECTORY_SEPARATOR . $this->getFileName();
    }

    public function getThumbnailLocation() {
        return $this->getFileSystemUploadPath() . DIRECTORY_SEPARATOR . $this->getThumbnailName();
    }

    /**
     *  get file system path of an attribute (image url).
     * @param type $attribute
     * @return type 
     */
    /*
      public function getFileSystemPathByAttribute($attribute) {
      return (Yii::getPathOfAlias('webroot') . DIRECTORY_SEPARATOR . $this->{$attribute});
      }
     */
    /**
     * get Thumbs File System Path
     *
     * @param item $model        	
     * @return string
     */
    /*
      public function getThumbnailFileSystemPath($folderName=null) {
      //return ($this->getFileSystemPath($folderName) . DIRECTORY_SEPARATOR);
      return $this->getFileSystemPath($folderName);
      }
     * 
     */

    /**
     *  creates unique random image name.
     * @param string $prefix of image name.
     * @return type 
     */
    /*
      public function generateRandomFileName($prefix) {
      return $prefix . dechex(time()) . $this->generateRandomString();
      }
     */
    /*
      public function deleteModelFiles($attribute=null) {
      try {
      if ($attribute === null) {
      foreach ($this->attributes as $attribute => $value) {
      if (endsWith($attribute, 'url')) {
      $filePath = $this->getFileSystemPathByAttribute($attribute);
      deleteFile($filePath);
      }
      }
      } else {
      if ($this->hasAttribute($attribute)) {
      $filePath = $this->getFileSystemPathByAttribute($attribute);
      deleteFile($filePath);
      }
      }
      } catch (Exception $ex) {
      //TODO: handle the exception.
      return false;
      }
      return true;
      }
      8/
      public function deleteFileUploadDirectory() {
      $dirPath = $this->getFileSystemPath('');
      try {
      deleteDirectory($dirPath);
      } catch (Exception $ex) {
      //TODO: handle the exception.
      return false;
      }
      return true;
      }

      /*
      //Reize, crop and pad white background.
      public function resizeImage($source_image, $destination, $tn_w, $tn_h, $quality = 80) {
      $info = getimagesize($source_image);
      $imgtype = image_type_to_mime_type($info[2]);

      #assuming the mime type is correct
      switch ($imgtype) {
      case 'image/jpeg':
      $source = imagecreatefromjpeg($source_image);
      break;
      case 'image/gif':
      $source = imagecreatefromgif($source_image);
      break;
      case 'image/png':
      $source = imagecreatefrompng($source_image);
      break;
      default:
      die('Invalid image type.');
      }

      #Figure out the dimensions of the image and the dimensions of the desired thumbnail
      $src_w = imagesx($source);
      $src_h = imagesy($source);


      #Do some math to figure out which way we'll need to crop the image
      #to get it proportional to the new size, then crop or adjust as needed

      $x_ratio = $tn_w / $src_w;
      $y_ratio = $tn_h / $src_h;

      if (($src_w <= $tn_w) && ($src_h <= $tn_h)) {
      $new_w = $src_w;
      $new_h = $src_h;
      } elseif (($x_ratio * $src_h) < $tn_h) {
      $new_h = ceil($x_ratio * $src_h);
      $new_w = $tn_w;
      } else {
      $new_w = ceil($y_ratio * $src_w);
      $new_h = $tn_h;
      }

      $newpic = imagecreatetruecolor(round($new_w), round($new_h));
      imagecopyresampled($newpic, $source, 0, 0, 0, 0, $new_w, $new_h, $src_w, $src_h);
      $final = imagecreatetruecolor($tn_w, $tn_h);
      $backgroundColor = imagecolorallocate($final, 255, 255, 255);
      imagefill($final, 0, 0, $backgroundColor);
      //imagecopyresampled($final, $newpic, 0, 0, ($x_mid - ($tn_w / 2)), ($y_mid - ($tn_h / 2)), $tn_w, $tn_h, $tn_w, $tn_h);
      imagecopy($final, $newpic, (($tn_w - $new_w) / 2), (($tn_h - $new_h) / 2), 0, 0, $new_w, $new_h);

      if (imagejpeg($final, $destination, $quality)) {
      return true;
      }
      return false;
      }
     * 
     */

    protected function createUID() {
        $this->uid = strRandomLong(32);
    }

    public function deleteModel($absolute = false) {
        if ($absolute) {
            if ($this->delete(true)) {
                try {
                    $fileSysDir = $this->getFileSystemUploadPath();
                    deleteFile($this->getFileLocation());
                    deleteFile($this->getThumbnailLocation());
                    return true;
                } catch (CException $e) {
                    return false;
                }
            }
        } else {
            return $this->delete(false);
        }
    }

    public function getByUID($uid) {
        return $this->getByAttributes(array('uid' => $uid));
    }

    /*     * ****** Accessors ******* */

    public function getAbsFileUrl() {

        return $this->getRootUrl() . '/' . $this->getFileUrl();
    }

    public function getAbsThumbnailUrl() {
        return $this->getRootUrl() . '/' . $this->getThumbnailUrl();
    }

    public function getRootUrl() {
        if (isset($this->base_url)) {
            return $this->base_url;
        } else {
            return Yii::app()->getBaseUrl(true);
        }
    }

    public function getUID() {
        return $this->uid;
    }

    public function setUID($v) {
        $this->uid = $v;
    }

    public function getFileUrl() {
        return $this->file_url;
    }

    public function setFileUrl($v) {
        $this->file_url = $v;
    }

    public function getFileExtension() {
        return $this->file_ext;
    }

    public function setFileExtension($v) {
        $this->file_ext = $v;
    }

    public function getFileSize() {
        return $this->file_size;
    }

    public function setFileSize($v) {
        $this->file_size = $v;
    }

    public function getMimeType() {
        return $this->mime_type;
    }

    public function setMimeType($v) {
        $this->mime_type = $v;
    }

    public function getFileName() {
        return $this->file_name;
    }

    public function setFileName($v) {
        $this->file_name = $v;
    }

    public function getThumbnailName() {
        return $this->thumbnail_name;
    }

    public function setThumbnailName($v) {
        $this->thumbnail_name = $v;
    }

    public function getThumbnailUrl() {
        return $this->thumbnail_url;
    }

    public function setThumbnailUrl($v) {
        $this->thumbnail_url = $v;
    }

    public function getBaseUrl() {
        return $this->base_url;
    }

    public function setBaseUrl($v) {
        $this->base_url = $v;
    }

    public function getDisplayOrder() {
        return $this->display_order;
    }

    public function setDisplayOrder($v) {
        $this->display_order = $v;
    }

}
