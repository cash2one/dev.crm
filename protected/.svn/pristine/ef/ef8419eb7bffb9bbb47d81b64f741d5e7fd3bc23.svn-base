<?php

class AppManager {

    // app footer nav 1.
    public function loadNav1Json() {
        $teamIntroLimit = 100;    // 最多只展示5张图
        $output = array();
        // load top scrolling image and action url.
        $teamMgr = new ExpertTeamManager();
        $teamList = $teamMgr->loadAllIExpertTeamsByCity(null);
        $teamIntroList = array();
        if (arrayNotEmpty($teamList)) {
            $counter = 1;
            foreach ($teamList as $team) {
                if ($counter > $teamIntroLimit) {
                    break;
                }
                if (isset($team->introImageUrl) && trim($team->introImageUrl) != "") {
                    $data = array();
                    $data["teamId"] = $team->teamId;
                    $data["teamName"] = $team->teamName;
                    $data['teamCode'] = $team->teamCode;
                    $data['introImageUrl'] = $team->introImageUrl;
                    $data['teamUrl'] = Yii::app()->createAbsoluteUrl("api/expertteam", array('id' => $team->teamId));
                    $teamIntroList[] = $data;
                }
                $counter++;
            }
        }
        $output['teamList'] = $teamIntroList;

        // load faculties.
        $facultyMgr = new FacultyManager();
        $facultyList = $facultyMgr->loadFacultyList2();
        $output['facultyList'] = $facultyList;

        return $output;
    }

    // app footer nav 1.
    public function loadNav2Json() {
        // all expert team list.
        $cityId = null;
        $teamMgr = new ExpertTeamManager();
        $output = $teamMgr->loadAllIExperTeamsByCityJson($cityId);

        return $output;
    }

    public function loadAppVersionJson($inputs) {
        $appVersion = $this->loadAppVersion($inputs);
        $output = array('appversion' => $appVersion);

        return $output;
    }

    public function loadAppVersion($inputs) {
        $output = array();
        $errors = $this->validateAppVersionInputs($inputs);
        if (empty($errors) === false) {
            // has error, so return error.
            $output['errors'] = $errors;
            return $output;
        }
        $appVersionNo = $inputs['app_version'];
        $os = $inputs['os'];
        $modelAppVersion = AppVersion::model()->getLastestVersionByOS($os);
        if (isset($modelAppVersion) === false) {
            $errors['app_version'] = 'No data.';
            $output['errors'] = $errors;
            return $output;
        }

        $appObj = new stdClass();
        $appObj->app_version = $appVersionNo;
        $appObj->cur_app_version = $modelAppVersion->getAppVersion();
        $appObj->cur_app_dl_url = $modelAppVersion->getAppDownloadUrl();
        $appObj->force_update = $modelAppVersion->getIsForceUpdate();
        $appObj->change_log = $modelAppVersion->getChangeLog();

        return $appObj;
    }

    private function validateAppVersionInputs($inputs) {
        $errors = array();
        // Compulsory fields.
        $fields = array('os', 'os_version', 'device', 'app_version');
        foreach ($fields as $field) {
            if (isset($inputs[$field]) === false) {
                $errors[$field] = 'Missing ' . $field;
            }
        }
        if (empty($errors) === false) {
            return $errors;
        }

        // OS
        if ($inputs['os'] != 'ios' && $inputs['os'] != 'android') {
            $errors['os'] = 'Unknown os';
        }

        return $errors;
    }

}
