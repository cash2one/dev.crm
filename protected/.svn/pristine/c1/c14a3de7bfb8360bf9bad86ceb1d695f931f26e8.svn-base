<?php

class DoctorController extends MobiledoctorController {

    private $model; // Doctor model
    private $patient;   // PatientInfo model
    private $patientMR; // PatientMR model

    public function filterPatientContext($filterChain) {
        $patientId = null;
        if (isset($_GET['id'])) {
            $patientId = $_GET['id'];
        } else if (isset($_POST['patient']['id'])) {
            $patientId = $_POST['patient']['id'];
        }

        $this->loadPatientInfoById($patientId);

        //complete the running of other filters and execute the requested action.
        $filterChain->run();
    }

    /**
     * @NOTE call this method after filterUserDoctorContext.
     * @param type $filterChain
     */
    public function filterPatientCreatorContext($filterChain) {
        $patientId = null;
        if (isset($_GET['pid'])) {
            $patientId = $_GET['pid'];
        } elseif (isset($_GET['id'])) {
            $patientId = $_GET['id'];
        } else if (isset($_POST['patient']['id'])) {
            $patientId = $_POST['patient']['id'];
        }
        $creator = $this->loadUser();

        $this->loadPatientInfoByIdAndCreatorId($patientId, $creator->getId());
        $filterChain->run();
    }

    /**
     * @NOTE call this method after filterUserDoctorContext.
     * @param type $filterChain
     */
    public function filterPatientMRCreatorContext($filterChain) {
        $mrid = null;
        if (isset($_GET['mrid'])) {
            $mrid = $_GET['mrid'];
        } elseif (isset($_POST['patientbooking']['mrid'])) {
            $mrid = $_POST['patientbooking']['mrid'];
        }
        $user = $this->loadUser();
        $this->loadPatientMRByIdAndCreatorId($mrid, $user->getId());
        $filterChain->run();
    }

    /**
     * @return array action filters
     */
    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
            'postOnly + delete', // we only allow deletion via POST request
            'userDoctorContext + profile ajaxProfile xcreatePatient xajaxCreatePatient xcreatePatientMR xcreateBooking view',
            'patientContext + xcreatePatientMR',
            'patientCreatorContext + xcreateBooking'
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules() {
        return array(
            array('allow', // allow all users to perform 'index' and 'view' actions
                'actions' => array('register', 'login'),
                'users' => array('*'),
            ),
            array('allow', // allow authenticated user to perform 'create' and 'update' actions
                'actions' => array('logout', 'view', 'profile', 'createPatient', 'xcreatePatientMR', 'xcreateBooking', 'ajaxProfile', 'ajaxUploadCert', 'xajaxCreatePatient', 'xajaxCreatePatientMR', 'xajaxUploadMRFile', 'xajaxCreateBooking'),
                'users' => array('@'),
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    public function actionView() {
        // 我的患者
        // 我的认证信息
        // 账号
        $this->redirect(array('patient/create'));
    }

    public function actionRegister() {
        $userRole = StatCode::USER_ROLE_DOCTOR;
        $form = new UserRegisterForm();
        $form->role = $userRole;
        $form->terms = 1;
        //$form->sms_verify_code = 123456;

        $this->performAjaxValidation($form);

        if (isset($_POST['UserRegisterForm'])) {
            $values = $_POST['UserRegisterForm'];
            $form->setAttributes($values, true);

            $userMgr = new UserManager();
            $userMgr->registerNewUser($form);
            if ($form->hasErrors() === false) {
                // success                
                $loginForm = $userMgr->autoLoginUser($form->username, $form->password, $userRole, 1);
                //$this->redirect($this->getReturnUrl());
                $this->redirect(array('doctor/profile'));
            }
        }

        $this->render('register', array(
            'model' => $form,
        ));
    }

    /*
      public function actionAjaxUploadMRFile() {
      $output = array('status' => 'no');
      if (isset($_POST['patient'])) {
      $values = $_POST['patient'];
      $patientMgr = new PatientManager();
      if (isset($values['mrid']) === false) {
      // ['patient']['mrid'] is missing.
      $output['status'] = 'no';
      $output['error'] = 'invalid parameters';
      $this->renderJsonOutput($output);
      }
      $mrid = $values['mrid'];
      $patientMR = $patientMgr->loadPatientMRById($mrid);
      if (isset($patientMR) === false) {
      // PatientInfo record is not found in db.
      $output['status'] = 'no';
      $output['errors'] = 'invalid mrid';
      $this->renderJsonOutput($output);
      } else {
      $output['patientId'] = $patientMR->getPatientId();
      $ret = $patientMgr->createPatientMRFile($patientMR);
      if (isset($ret['error'])) {
      $output['status'] = 'no';
      $output['error'] = $ret['error'];
      $output['file'] = '';
      } else {
      // create file output.
      $fileModel = $ret['filemodel'];
      $data = new stdClass();
      $data->id = $fileModel->getId();
      $data->patientId = $fileModel->getPatientId();
      $data->fileUrl = $fileModel->getAbsFileUrl();
      $data->tnUrl = $fileModel->getAbsThumbnailUrl();
      $data->deleteUrl = $this->createUrl('patient/deleteMRFile', array('id' => $fileModel->getId()));

      $output['status'] = 'ok';
      $output['file'] = $data;
      //$output['redirectUrl'] = $this->createUrl("home/index");
      }
      }
      }
      $this->renderJsonOutput($output);
      }
     */

    public function actionAjaxUploadCert() {
        $output = array('status' => 'no');

        if (isset($_POST['doctor'])) {
            $values = $_POST['doctor'];
            $doctorMgr = new DoctorManager();
            if (isset($values['id']) === false) {
                // ['doctor']['id'] is missing.
                $output['status'] = 'no';
                $output['error'] = 'invalid parameters';
                $this->renderJsonOutput($output);
            }
            $doctorId = $values['id'];
            $doctor = $doctorMgr->loadDoctorById($doctorId);
            if (isset($doctor) === false) {
                // Doctor record is not found in db.
                $output['status'] = 'no';
                $output['errors'] = 'invalid id';
                $this->renderJsonOutput($output);
            } else {
                $output['doctorId'] = $doctorId;
                $ret = $doctorMgr->createDoctorCert($doctorId);
                if (isset($ret['error'])) {
                    $output['status'] = 'no';
                    $output['error'] = $ret['error'];
                    $output['file'] = '';
                } else {
                    // create file output.
                    $fileModel = $ret['filemodel'];
                    $data = new stdClass();
                    $data->id = $fileModel->getId();
                    $data->userId = $fileModel->getUserId();
                    $data->fileUrl = $fileModel->getAbsFileUrl();
                    $data->tnUrl = $fileModel->getAbsThumbnailUrl();
                    $data->deleteUrl = $this->createUrl('doctor/deleteCert', array('id' => $fileModel->getId()));

                    $output['status'] = 'ok';
                    $output['file'] = $data;
                    //$output['redirectUrl'] = $this->createUrl("home/index");
                }
            }
        } else {
            $output['error'] = 'invalid parameters.';
        }

        $this->renderJsonOutput($output);
    }

    public function actionAjaxProfile() {
        $output = array('status' => 'no');
        if (isset($_POST['doctor'])) {
            $values = $_POST['doctor'];
            //@TODO needs to verify if user_id == Doctor.user_id.
            //    $doctorMgr = new DoctorManager();
            $regionMgr = new RegionManager();

            $user = $this->loadUser();
            $userId = $user->getId();
            $doctorProfile = $user->getUserDoctorProfile();
            if (is_null($doctorProfile)) {
                $doctorProfile = new UserDoctorProfile();
            }
            $doctorProfile->setAttributes($values, true);
            // Doctor.name.
            /*
              if (isset($values['name']) === false) {
              $doctorProfile->name = $doctorProfile->getName();
              }
             * 
             */
            // user_id.
            $doctorProfile->user_id = $userId;
            // UserDoctorProfile.state_name.
            $state = $regionMgr->loadRegionStateById($doctorProfile->state_id);
            if (isset($state)) {
                $doctorProfile->state_name = $state->getName();
            }
            // UserDoctorProflie.city_name;
            $city = $regionMgr->loadRegionCityById($doctorProfile->city_id);
            if (isset($city)) {
                $doctorProfile->city_name = $city->getName();
            }
            if ($doctorProfile->save()) {
                $output['status'] = 'ok';
                $output['doctor']['id'] = $doctorProfile->getId();
            } else {
                $output['status'] = 'no';
                $output['errors'] = $doctorProfile->getErrors();
            }
        }
        $this->renderJsonOutput($output);
    }

    public function actionProfile() {
        $user = $this->loadUser();
        $doctorProfile = $user->getUserDoctorProfile();
        $form = new UserDoctorProfileForm();
        $form->initModel($doctorProfile);
        $form->terms = 1;

        //@TODO.
        //    $testData = $this->createDoctorTestData();
        //    $form->setAttributes($testData, true);

        $this->render('profile', array(
            'model' => $form,
        ));
    }

    /*
      public function actionAjaxCreatePatient() {
      $output = array('status' => 'no');
      if (isset($_POST['patient'])) {
      $values = $_POST['patient'];
      //@TODO needs to verify if user_id == Doctor.user_id.
      $doctorMgr = new DoctorManager();
      $user = $this->loadUser();
      $userId = $user->getId();
      $form = new PatientInfoForm();
      $form->setAttributes($values, true);
      $form->creator_id = $userId;
      $form->country_id = 1;  // default country is China.
      if ($form->validate()) {
      $patient = new PatientInfo();
      $patient->setAttributes($form->attributes, true);
      $patient->setBirthYear($form->age);
      if ($patient->save()) {
      $output['status'] = 'ok';
      $output['patient']['id'] = $patient->getId();
      } else {
      $output['errors'] = $patient->getErrors();
      }
      } else {
      $output['errors'] = $form->getErrors();
      }
      }
      $this->renderJsonOutput($output);
      }

      public function actionCreatePatient() {
      $doctorId = $this->getCurrentUserId();
      $form = new PatientInfoForm();
      $form->initModel();
      $this->render("createPatient", array(
      'model' => $form
      ));
      }
     */

    /**
     * @DELETE
     */
    public function actionCreatePatient(){
        $this->redirect(array('patient/create'));
    }
    
    public function actionLogout() {
        Yii::app()->user->logout();
        $this->redirect('doctor/login');
    }

    public function actionLogin() {

        $form = new UserLoginForm();
        $form->role = StatCode::USER_ROLE_DOCTOR;
        $form->rememberMe = 1;

        // collect user input data
        if (isset($_POST['UserLoginForm'])) {
            $values = $_POST['UserLoginForm'];
            $form->setAttributes($values, true);
            $userMgr = new UserManager();
            $userMgr->doLogin($form);
            if ($form->hasErrors() === false) {
                //$this->redirect($this->getReturnUrl());                
                $this->redirect(array('patient/create'));
            }
        }

        $this->render("login", array(
            'model' => $form
        ));
    }

    /*
      public function actionAjaxCreatePatientMR() {
      $output = array('status' => 'no');
      if (isset($_POST['patient'])) {
      $values = $_POST['patient'];
      $patientId = isset($values['id']) ? $values['id'] : null;
      $mrid = isset($values['mrid']) ? $values['mrid'] : null;
      $doctor = $this->loadUser();
      //    $patientMgr = new PatientManager();
      $pmrForm = new PatientMRForm();
      $pmrForm->setAttributes($values, true);
      $pmrForm->setPatientId($patientId);
      $pmrForm->setCreatorId($doctor->getId());
      $pmrForm->setId($mrid);
      if ($pmrForm->validate()) {
      $patientMgr = new PatientManager();
      $patientMR = null;
      if (isset($pmrForm->id)) {
      $patientMR = $patientMgr->loadPatientMRById($pmrForm->id);
      }
      if (isset($patientMR) === false) {
      $patientMR = new PatientMR();
      }

      $patientMR->setAttributes($pmrForm->attributes, true);
      //    $patientMR->id = $pmrForm->id;
      if ($patientMR->save()) {
      $output['status'] = 'ok';
      $output['patient']['id'] = $patientMR->getPatientId();
      $output['patient']['mrid'] = $patientMR->getId();
      } else {
      $output['errors'] = $patientMR->getErrors();
      }
      } else {
      $output['errors'] = $pmrForm->getErrors();
      }
      }
      $this->renderJsonOutput($output);
      }

      public function actionCreatePatientMR($id) {
      $patient = $this->loadPatientInfoById($id);
      $patientMR = $patient->getMR();

      $form = new PatientMRForm();
      $form->initModel($patientMR);
      $form->setPatientInfo($patient);

      $this->render('createPatientMR', array(
      'model' => $form
      ));
      }
     */
    /*
      public function actionAjaxCreateBooking() {
      $output = array('status' => 'no');
      if (isset($_POST['booking'])) {
      $values = $_POST['booking'];
      $patientId = isset($values['patient_id']) ? $values['patient_id'] : null;
      $user = $this->loadUser();
      $userId = $user->getId();
      $form = new PatientBookingForm();
      $form->setAttributes($values, true);
      $form->setPatientId($patientId);
      $form->setCreatorId($userId);
      if ($form->validate()) {
      $patientBooking = new PatientBooking();
      $patientBooking->setAttributes($form->attributes, true);
      if ($patientBooking->save()) {
      $output['status'] = 'ok';
      $output['booking']['id'] = $patientBooking->getId();
      $output['booking']['patientId'] = $patientBooking->getPatientId();
      } else {
      $output['errors'] = $patientBooking->getErrors();
      }
      } else {
      $output['errors'] = $form->getErrors();
      }
      } else {
      $output['error'] = 'invalid request';
      }
      $this->renderJsonOutput($output);
      }

      public function actionCreateBooking($pid) {
      //$patientMR = $this->patientMR;
      $patient = $this->patient;
      $form = new PatientBookingForm();
      $form->initModel();
      $form->setPatientId($patient->getId());
      $this->render('createBooking', array(
      'model' => $form
      ));
      }
     */

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer $id the ID of the model to be loaded
     * @return Doctor the loaded model
     * @throws CHttpException
     */
    public function loadModel($id) {
        if ($this->model === null) {
            $this->model = Doctor::model()->getById($id);
            if ($this->model === null)
                throw new CHttpException(404, 'The requested page does not exist.');
        }

        return $this->model;
    }

    /*
      public function loadPatientInfoById($id) {
      if ($this->patient === null) {
      $this->patient = PatientInfo::model()->getById($id);
      if ($this->patient === null)
      throw new CHttpException(404, 'The requested page does not exist.');
      }
      return $this->patient;
      }

      public function loadPatientInfoByIdAndCreatorId($id, $creatorId) {
      if (is_null($this->patient)) {
      $this->patient = PatientInfo::model()->getByIdAndCreatorId($id, $creatorId);
      if (is_null($this->patient)) {
      throw new CHttpException(404, 'The requested page does not exist.');
      }
      }
      return $this->patient;
      }

      public function loadPatientMRByIdAndCreatorId($id, $creatorId) {
      if (is_null($this->patientMR)) {
      $this->patientMR = PatientMR::model()->getByIdAndCreatorId($id, $creatorId);
      if (is_null($this->patientMR)) {
      throw new CHttpException(404, 'The requested page does not exist.');
      }
      }
      return $this->patientMR;
      }
     */

    protected function registerDoctor(DoctorForm $form) {
        if (isset($_POST['DoctorForm'])) {
            $values = $_POST['DoctorForm'];
            $form->setAttributes($values);
            $form->hp_dept_name = $form->faculty;

            //$form->hospital_id = null;
            $doctorMgr = new DoctorManager();
            //if ($doctorMgr->createDoctor($form, false)) {   // do not check verify_code.
            if ($doctorMgr->createDoctor($form)) {
                // Send email to inform admin.
                $doctorId = $form->getId();
                $with = array('doctorCerts', 'doctorHospital', 'doctorHpDept', 'doctorCity');
                $idoctor = $doctorMgr->loadIDoctor($doctorId, $with);

                if (isset($idoctor)) {
                    $emailMgr = new EmailManager();
                    $emailMgr->sendEmailDoctorRegister($idoctor);
                }
// store successful message id in session.
                $this->setFlashMessage("doctor.success", "success");
                $this->refresh(true);     // terminate and refresh the current page.
            } else {
                
            }
        }
    }

    private function createDoctorTestData() {
        $data = array(
            'fullname' => '小明',
            'hospital_name' => '北京医院',
            'hp_dept_name' => '肿瘤科',
            'state_id' => '1',
            'city_id' => '1',
            'medical_title' => '1',
            'academic_title' => '1',
            'terms' => 1,
        );
        return $data;
    }

}
